# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: server/server.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from server import database_create_pb2 as server_dot_database__create__pb2
from server import database_delete_pb2 as server_dot_database__delete__pb2
from server import database_list_pb2 as server_dot_database__list__pb2
from server import database_define_pb2 as server_dot_database__define__pb2
from server import collection_create_pb2 as server_dot_collection__create__pb2
from server import collection_delete_pb2 as server_dot_collection__delete__pb2
from server import collection_list_pb2 as server_dot_collection__list__pb2
from server import collection_define_pb2 as server_dot_collection__define__pb2
from server import find_pb2 as server_dot_find__pb2
from server import insert_pb2 as server_dot_insert__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='server/server.proto',
  package='protodb.server',
  syntax='proto3',
  serialized_pb=_b('\n\x13server/server.proto\x12\x0eprotodb.server\x1a\x1cserver/database_create.proto\x1a\x1cserver/database_delete.proto\x1a\x1aserver/database_list.proto\x1a\x1cserver/database_define.proto\x1a\x1eserver/collection_create.proto\x1a\x1eserver/collection_delete.proto\x1a\x1cserver/collection_list.proto\x1a\x1eserver/collection_define.proto\x1a\x11server/find.proto\x1a\x13server/insert.proto2\xe9\x06\n\x07ProtoDB\x12X\n\x0e\x43reateDatabase\x12\x1e.protodb.server.CreateDatabase\x1a&.protodb.server.CreateDatabaseResponse\x12X\n\x0e\x44\x65leteDatabase\x12\x1e.protodb.server.DeleteDatabase\x1a&.protodb.server.DeleteDatabaseResponse\x12U\n\rListDatabases\x12\x1d.protodb.server.ListDatabases\x1a%.protodb.server.ListDatabasesResponse\x12X\n\x0e\x44\x65\x66ineDatabase\x12\x1e.protodb.server.DefineDatabase\x1a&.protodb.server.DefineDatabaseResponse\x12^\n\x10\x43reateCollection\x12 .protodb.server.CreateCollection\x1a(.protodb.server.CreateCollectionResponse\x12^\n\x10\x44\x65leteCollection\x12 .protodb.server.DeleteCollection\x1a(.protodb.server.DeleteCollectionResponse\x12[\n\x0fListCollections\x12\x1f.protodb.server.ListCollections\x1a\'.protodb.server.ListCollectionsResponse\x12^\n\x10\x44\x65\x66ineCollection\x12 .protodb.server.DefineCollection\x1a(.protodb.server.DefineCollectionResponse\x12:\n\x04\x46ind\x12\x14.protodb.server.Find\x1a\x1c.protodb.server.FindResponse\x12@\n\x06Insert\x12\x16.protodb.server.Insert\x1a\x1e.protodb.server.InsertResponseb\x06proto3')
  ,
  dependencies=[server_dot_database__create__pb2.DESCRIPTOR,server_dot_database__delete__pb2.DESCRIPTOR,server_dot_database__list__pb2.DESCRIPTOR,server_dot_database__define__pb2.DESCRIPTOR,server_dot_collection__create__pb2.DESCRIPTOR,server_dot_collection__delete__pb2.DESCRIPTOR,server_dot_collection__list__pb2.DESCRIPTOR,server_dot_collection__define__pb2.DESCRIPTOR,server_dot_find__pb2.DESCRIPTOR,server_dot_insert__pb2.DESCRIPTOR,])
_sym_db.RegisterFileDescriptor(DESCRIPTOR)





import grpc
from grpc.beta import implementations as beta_implementations
from grpc.beta import interfaces as beta_interfaces
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities


class ProtoDBStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.CreateDatabase = channel.unary_unary(
        '/protodb.server.ProtoDB/CreateDatabase',
        request_serializer=server_dot_database__create__pb2.CreateDatabase.SerializeToString,
        response_deserializer=server_dot_database__create__pb2.CreateDatabaseResponse.FromString,
        )
    self.DeleteDatabase = channel.unary_unary(
        '/protodb.server.ProtoDB/DeleteDatabase',
        request_serializer=server_dot_database__delete__pb2.DeleteDatabase.SerializeToString,
        response_deserializer=server_dot_database__delete__pb2.DeleteDatabaseResponse.FromString,
        )
    self.ListDatabases = channel.unary_unary(
        '/protodb.server.ProtoDB/ListDatabases',
        request_serializer=server_dot_database__list__pb2.ListDatabases.SerializeToString,
        response_deserializer=server_dot_database__list__pb2.ListDatabasesResponse.FromString,
        )
    self.DefineDatabase = channel.unary_unary(
        '/protodb.server.ProtoDB/DefineDatabase',
        request_serializer=server_dot_database__define__pb2.DefineDatabase.SerializeToString,
        response_deserializer=server_dot_database__define__pb2.DefineDatabaseResponse.FromString,
        )
    self.CreateCollection = channel.unary_unary(
        '/protodb.server.ProtoDB/CreateCollection',
        request_serializer=server_dot_collection__create__pb2.CreateCollection.SerializeToString,
        response_deserializer=server_dot_collection__create__pb2.CreateCollectionResponse.FromString,
        )
    self.DeleteCollection = channel.unary_unary(
        '/protodb.server.ProtoDB/DeleteCollection',
        request_serializer=server_dot_collection__delete__pb2.DeleteCollection.SerializeToString,
        response_deserializer=server_dot_collection__delete__pb2.DeleteCollectionResponse.FromString,
        )
    self.ListCollections = channel.unary_unary(
        '/protodb.server.ProtoDB/ListCollections',
        request_serializer=server_dot_collection__list__pb2.ListCollections.SerializeToString,
        response_deserializer=server_dot_collection__list__pb2.ListCollectionsResponse.FromString,
        )
    self.DefineCollection = channel.unary_unary(
        '/protodb.server.ProtoDB/DefineCollection',
        request_serializer=server_dot_collection__define__pb2.DefineCollection.SerializeToString,
        response_deserializer=server_dot_collection__define__pb2.DefineCollectionResponse.FromString,
        )
    self.Find = channel.unary_unary(
        '/protodb.server.ProtoDB/Find',
        request_serializer=server_dot_find__pb2.Find.SerializeToString,
        response_deserializer=server_dot_find__pb2.FindResponse.FromString,
        )
    self.Insert = channel.unary_unary(
        '/protodb.server.ProtoDB/Insert',
        request_serializer=server_dot_insert__pb2.Insert.SerializeToString,
        response_deserializer=server_dot_insert__pb2.InsertResponse.FromString,
        )


class ProtoDBServicer(object):

  def CreateDatabase(self, request, context):
    """Database commands
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DeleteDatabase(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListDatabases(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DefineDatabase(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CreateCollection(self, request, context):
    """Collection commands
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DeleteCollection(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListCollections(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DefineCollection(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Find(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Insert(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ProtoDBServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'CreateDatabase': grpc.unary_unary_rpc_method_handler(
          servicer.CreateDatabase,
          request_deserializer=server_dot_database__create__pb2.CreateDatabase.FromString,
          response_serializer=server_dot_database__create__pb2.CreateDatabaseResponse.SerializeToString,
      ),
      'DeleteDatabase': grpc.unary_unary_rpc_method_handler(
          servicer.DeleteDatabase,
          request_deserializer=server_dot_database__delete__pb2.DeleteDatabase.FromString,
          response_serializer=server_dot_database__delete__pb2.DeleteDatabaseResponse.SerializeToString,
      ),
      'ListDatabases': grpc.unary_unary_rpc_method_handler(
          servicer.ListDatabases,
          request_deserializer=server_dot_database__list__pb2.ListDatabases.FromString,
          response_serializer=server_dot_database__list__pb2.ListDatabasesResponse.SerializeToString,
      ),
      'DefineDatabase': grpc.unary_unary_rpc_method_handler(
          servicer.DefineDatabase,
          request_deserializer=server_dot_database__define__pb2.DefineDatabase.FromString,
          response_serializer=server_dot_database__define__pb2.DefineDatabaseResponse.SerializeToString,
      ),
      'CreateCollection': grpc.unary_unary_rpc_method_handler(
          servicer.CreateCollection,
          request_deserializer=server_dot_collection__create__pb2.CreateCollection.FromString,
          response_serializer=server_dot_collection__create__pb2.CreateCollectionResponse.SerializeToString,
      ),
      'DeleteCollection': grpc.unary_unary_rpc_method_handler(
          servicer.DeleteCollection,
          request_deserializer=server_dot_collection__delete__pb2.DeleteCollection.FromString,
          response_serializer=server_dot_collection__delete__pb2.DeleteCollectionResponse.SerializeToString,
      ),
      'ListCollections': grpc.unary_unary_rpc_method_handler(
          servicer.ListCollections,
          request_deserializer=server_dot_collection__list__pb2.ListCollections.FromString,
          response_serializer=server_dot_collection__list__pb2.ListCollectionsResponse.SerializeToString,
      ),
      'DefineCollection': grpc.unary_unary_rpc_method_handler(
          servicer.DefineCollection,
          request_deserializer=server_dot_collection__define__pb2.DefineCollection.FromString,
          response_serializer=server_dot_collection__define__pb2.DefineCollectionResponse.SerializeToString,
      ),
      'Find': grpc.unary_unary_rpc_method_handler(
          servicer.Find,
          request_deserializer=server_dot_find__pb2.Find.FromString,
          response_serializer=server_dot_find__pb2.FindResponse.SerializeToString,
      ),
      'Insert': grpc.unary_unary_rpc_method_handler(
          servicer.Insert,
          request_deserializer=server_dot_insert__pb2.Insert.FromString,
          response_serializer=server_dot_insert__pb2.InsertResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'protodb.server.ProtoDB', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class BetaProtoDBServicer(object):
  def CreateDatabase(self, request, context):
    """Database commands
    """
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def DeleteDatabase(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def ListDatabases(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def DefineDatabase(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def CreateCollection(self, request, context):
    """Collection commands
    """
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def DeleteCollection(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def ListCollections(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def DefineCollection(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def Find(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def Insert(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


class BetaProtoDBStub(object):
  def CreateDatabase(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    """Database commands
    """
    raise NotImplementedError()
  CreateDatabase.future = None
  def DeleteDatabase(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  DeleteDatabase.future = None
  def ListDatabases(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  ListDatabases.future = None
  def DefineDatabase(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  DefineDatabase.future = None
  def CreateCollection(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    """Collection commands
    """
    raise NotImplementedError()
  CreateCollection.future = None
  def DeleteCollection(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  DeleteCollection.future = None
  def ListCollections(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  ListCollections.future = None
  def DefineCollection(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  DefineCollection.future = None
  def Find(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  Find.future = None
  def Insert(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  Insert.future = None


def beta_create_ProtoDB_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  request_deserializers = {
    ('protodb.server.ProtoDB', 'CreateCollection'): server_dot_collection__create__pb2.CreateCollection.FromString,
    ('protodb.server.ProtoDB', 'CreateDatabase'): server_dot_database__create__pb2.CreateDatabase.FromString,
    ('protodb.server.ProtoDB', 'DefineCollection'): server_dot_collection__define__pb2.DefineCollection.FromString,
    ('protodb.server.ProtoDB', 'DefineDatabase'): server_dot_database__define__pb2.DefineDatabase.FromString,
    ('protodb.server.ProtoDB', 'DeleteCollection'): server_dot_collection__delete__pb2.DeleteCollection.FromString,
    ('protodb.server.ProtoDB', 'DeleteDatabase'): server_dot_database__delete__pb2.DeleteDatabase.FromString,
    ('protodb.server.ProtoDB', 'Find'): server_dot_find__pb2.Find.FromString,
    ('protodb.server.ProtoDB', 'Insert'): server_dot_insert__pb2.Insert.FromString,
    ('protodb.server.ProtoDB', 'ListCollections'): server_dot_collection__list__pb2.ListCollections.FromString,
    ('protodb.server.ProtoDB', 'ListDatabases'): server_dot_database__list__pb2.ListDatabases.FromString,
  }
  response_serializers = {
    ('protodb.server.ProtoDB', 'CreateCollection'): server_dot_collection__create__pb2.CreateCollectionResponse.SerializeToString,
    ('protodb.server.ProtoDB', 'CreateDatabase'): server_dot_database__create__pb2.CreateDatabaseResponse.SerializeToString,
    ('protodb.server.ProtoDB', 'DefineCollection'): server_dot_collection__define__pb2.DefineCollectionResponse.SerializeToString,
    ('protodb.server.ProtoDB', 'DefineDatabase'): server_dot_database__define__pb2.DefineDatabaseResponse.SerializeToString,
    ('protodb.server.ProtoDB', 'DeleteCollection'): server_dot_collection__delete__pb2.DeleteCollectionResponse.SerializeToString,
    ('protodb.server.ProtoDB', 'DeleteDatabase'): server_dot_database__delete__pb2.DeleteDatabaseResponse.SerializeToString,
    ('protodb.server.ProtoDB', 'Find'): server_dot_find__pb2.FindResponse.SerializeToString,
    ('protodb.server.ProtoDB', 'Insert'): server_dot_insert__pb2.InsertResponse.SerializeToString,
    ('protodb.server.ProtoDB', 'ListCollections'): server_dot_collection__list__pb2.ListCollectionsResponse.SerializeToString,
    ('protodb.server.ProtoDB', 'ListDatabases'): server_dot_database__list__pb2.ListDatabasesResponse.SerializeToString,
  }
  method_implementations = {
    ('protodb.server.ProtoDB', 'CreateCollection'): face_utilities.unary_unary_inline(servicer.CreateCollection),
    ('protodb.server.ProtoDB', 'CreateDatabase'): face_utilities.unary_unary_inline(servicer.CreateDatabase),
    ('protodb.server.ProtoDB', 'DefineCollection'): face_utilities.unary_unary_inline(servicer.DefineCollection),
    ('protodb.server.ProtoDB', 'DefineDatabase'): face_utilities.unary_unary_inline(servicer.DefineDatabase),
    ('protodb.server.ProtoDB', 'DeleteCollection'): face_utilities.unary_unary_inline(servicer.DeleteCollection),
    ('protodb.server.ProtoDB', 'DeleteDatabase'): face_utilities.unary_unary_inline(servicer.DeleteDatabase),
    ('protodb.server.ProtoDB', 'Find'): face_utilities.unary_unary_inline(servicer.Find),
    ('protodb.server.ProtoDB', 'Insert'): face_utilities.unary_unary_inline(servicer.Insert),
    ('protodb.server.ProtoDB', 'ListCollections'): face_utilities.unary_unary_inline(servicer.ListCollections),
    ('protodb.server.ProtoDB', 'ListDatabases'): face_utilities.unary_unary_inline(servicer.ListDatabases),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)


def beta_create_ProtoDB_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  request_serializers = {
    ('protodb.server.ProtoDB', 'CreateCollection'): server_dot_collection__create__pb2.CreateCollection.SerializeToString,
    ('protodb.server.ProtoDB', 'CreateDatabase'): server_dot_database__create__pb2.CreateDatabase.SerializeToString,
    ('protodb.server.ProtoDB', 'DefineCollection'): server_dot_collection__define__pb2.DefineCollection.SerializeToString,
    ('protodb.server.ProtoDB', 'DefineDatabase'): server_dot_database__define__pb2.DefineDatabase.SerializeToString,
    ('protodb.server.ProtoDB', 'DeleteCollection'): server_dot_collection__delete__pb2.DeleteCollection.SerializeToString,
    ('protodb.server.ProtoDB', 'DeleteDatabase'): server_dot_database__delete__pb2.DeleteDatabase.SerializeToString,
    ('protodb.server.ProtoDB', 'Find'): server_dot_find__pb2.Find.SerializeToString,
    ('protodb.server.ProtoDB', 'Insert'): server_dot_insert__pb2.Insert.SerializeToString,
    ('protodb.server.ProtoDB', 'ListCollections'): server_dot_collection__list__pb2.ListCollections.SerializeToString,
    ('protodb.server.ProtoDB', 'ListDatabases'): server_dot_database__list__pb2.ListDatabases.SerializeToString,
  }
  response_deserializers = {
    ('protodb.server.ProtoDB', 'CreateCollection'): server_dot_collection__create__pb2.CreateCollectionResponse.FromString,
    ('protodb.server.ProtoDB', 'CreateDatabase'): server_dot_database__create__pb2.CreateDatabaseResponse.FromString,
    ('protodb.server.ProtoDB', 'DefineCollection'): server_dot_collection__define__pb2.DefineCollectionResponse.FromString,
    ('protodb.server.ProtoDB', 'DefineDatabase'): server_dot_database__define__pb2.DefineDatabaseResponse.FromString,
    ('protodb.server.ProtoDB', 'DeleteCollection'): server_dot_collection__delete__pb2.DeleteCollectionResponse.FromString,
    ('protodb.server.ProtoDB', 'DeleteDatabase'): server_dot_database__delete__pb2.DeleteDatabaseResponse.FromString,
    ('protodb.server.ProtoDB', 'Find'): server_dot_find__pb2.FindResponse.FromString,
    ('protodb.server.ProtoDB', 'Insert'): server_dot_insert__pb2.InsertResponse.FromString,
    ('protodb.server.ProtoDB', 'ListCollections'): server_dot_collection__list__pb2.ListCollectionsResponse.FromString,
    ('protodb.server.ProtoDB', 'ListDatabases'): server_dot_database__list__pb2.ListDatabasesResponse.FromString,
  }
  cardinalities = {
    'CreateCollection': cardinality.Cardinality.UNARY_UNARY,
    'CreateDatabase': cardinality.Cardinality.UNARY_UNARY,
    'DefineCollection': cardinality.Cardinality.UNARY_UNARY,
    'DefineDatabase': cardinality.Cardinality.UNARY_UNARY,
    'DeleteCollection': cardinality.Cardinality.UNARY_UNARY,
    'DeleteDatabase': cardinality.Cardinality.UNARY_UNARY,
    'Find': cardinality.Cardinality.UNARY_UNARY,
    'Insert': cardinality.Cardinality.UNARY_UNARY,
    'ListCollections': cardinality.Cardinality.UNARY_UNARY,
    'ListDatabases': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'protodb.server.ProtoDB', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
