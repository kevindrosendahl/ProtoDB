#! /usr/bin/python

import errno
import os
import subprocess

protos_path = os.path.abspath("../protos")
server_protos_path = protos_path + "/server/"
test_protos_path = protos_path + "/test/"

src_path = os.path.abspath("../src")

src_server_path = src_path + "/server/"
src_server_protos_path = src_server_path + "protos/"
src_server_test_protos_path = src_server_protos_path + "test/"

grpc_proto_files = ["server"]
generated_grpc_file_suffix = "_grpc"
grpc_protoc_plugin_path = os.path.abspath(
    "~/src/rust/grpc-rust/grpc-generater/target/debug")


def ensure_empty_paths():
    ensure_empty_path(src_server_protos_path)
    ensure_empty_path(src_server_test_protos_path)


def ensure_empty_path(folder_path):
    try:
        os.makedirs(folder_path)
    except OSError, ose:
        if not ose.errno == errno.EEXIST:
            raise

    def clear_folder(path):
        for f in os.listdir(path):
            file_path = os.path.join(path, f)
            if os.path.isfile(file_path):
                os.unlink(file_path)
            elif os.path.isdir(file_path):
                clear_folder(file_path)
                os.rmdir(file_path)

    clear_folder(folder_path)


def generate_server_protos():
    generate_server_protos_cmd = ("protoc -I %s --rust_out=%s "
                                  "%s/*.proto" %
                                  (protos_path, src_server_protos_path, server_protos_path))

    run_shell_proccess(generate_server_protos_cmd)

    generate_grpc_protos()

    generate_protos_mod_file()


def generate_grpc_protos():
    os.environ["PATH"] += ":" + grpc_protoc_plugin_path
    generate_grpc_protos_cmd = ("protoc -I %s --rust-grpc_out=%s "
                                "%s/*.proto" %
                                (protos_path,
                                 src_server_protos_path,
                                 server_protos_path))

    run_shell_proccess(generate_grpc_protos_cmd)


def generate_protos_mod_file():
    protos = os.listdir(server_protos_path)
    protos.append("test")

    with open(src_server_protos_path + "mod.rs", "w+") as mod_file:
        mod_file.write(
            "extern crate protobuf;\npub use protobuf::descriptor;\n\n")

        for proto_name in sorted(map(lambda s: s.split(".proto")[0], protos)):
            if proto_name in grpc_proto_files:
                proto_name += generated_grpc_file_suffix

            mod_file.write("pub mod %s;\n" % proto_name)


def generate_test_protos():
    generate_test_protos_cmd = ("protoc -I %s --rust_out=%s "
                                "%s/*.proto" %
                                (protos_path, src_server_test_protos_path, test_protos_path))

    run_shell_proccess(generate_test_protos_cmd)

    os.rename(src_server_test_protos_path + "test.rs",
              src_server_test_protos_path + "mod.rs")


def run_shell_proccess(cmd, quiet=True, raise_on_stderr=True):
    p = subprocess.Popen(cmd,
                         shell=True,
                         stdout=subprocess.PIPE,
                         stderr=subprocess.PIPE)
    stdout, stderr = p.communicate()

    if stdout and not quiet:
        print "%s stdout: %s" % (cmd, stdout)

    if stderr:
        print "%s stderr: %s" % (cmd, stderr)

        if raise_on_stderr:
            raise Exception(stderr)

    return stdout


if __name__ == "__main__":
    ensure_empty_paths()
    generate_server_protos()
    generate_test_protos()
